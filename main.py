import asyncio
import logging
from catboost import CatBoostClassifier
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import pandas as pd


from aiogram import types, F, Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode


class Form(StatesGroup):
    Gender = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    Age = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
    Weight = State()
    Height = State()
    family_history = State()
    FAVC = State()
    FCVC = State()
    NCP = State()
    CAEC = State()
    SMOKE = State()
    CH2O = State()
    SCC = State()
    FAF = State()
    TUE = State()
    CALC = State()
    MTRANS = State()



button_start = KeyboardButton(text='–ù–∞—á–∞—Ç—å')
button1 = KeyboardButton(text='0')
button2 = KeyboardButton(text='1')
start_kb = ReplyKeyboardMarkup(keyboard=[[button_start], []], resize_keyboard=True)
binary_kb = ReplyKeyboardMarkup(keyboard=[[button1,button2]], resize_keyboard=True)


# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token="")
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()

@dp.message(Command("start"))
async def start_handler(msg: Message):
    await msg.answer("üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ–Ω—è—Ç—å, –≤ –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ —Ä–∏—Å–∫–∞ –ª–∏—à–Ω–µ–≥–æ –≤–µ—Å–∞ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è. –ù–∞–∂–º–∏ –ù–∞—á–∞—Ç—å, —á—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å", reply_markup=start_kb)

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await dp.start_polling(bot)


@dp.message(F.text.lower() == "–Ω–∞—á–∞—Ç—å")
async def smook_handler(msg: Message, state: FSMContext, ):
    await msg.answer('–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª', reply_markup=binary_kb)
    await state.set_state(Form.Gender)


@dp.message(Form.Gender)
async def smook_handler(msg: Message, state: FSMContext):
    await state.update_data(Gender = msg.text)
    await msg.answer('–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç')
    await state.set_state(Form.Age)

@dp.message(Form.Age)
async def smook_handler(msg: Message, state: FSMContext):
    await state.update_data(Age = msg.text)
    await msg.answer('–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç')
    await state.set_state(Form.Height)

@dp.message(Form.Height)
async def smook_handler(msg: Message, state: FSMContext):
    await state.update_data(Height = msg.text)
    await msg.answer('–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å')
    await state.set_state(Form.Weight)

@dp.message(Form.Weight)
async def smook_handler(msg: Message, state: FSMContext):
    await state.update_data(Weight = msg.text)
    await msg.answer('–í–∞—à–∏ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ —Å—Ç—Ä–∞–¥–∞–ª–∏ –æ—Ç –ª–∏—à–Ω–µ–≥–æ –≤–µ—Å–∞?', reply_markup=binary_kb)
    await state.set_state(Form.family_history)

@dp.message(Form.family_history)
async def smook_handler(msg: Message, state: FSMContext):
    await state.update_data(family_history = msg.text)
    await msg.answer('–ü–∏—Ç–∞–µ—Ç–µ—Å—å –ª–∏ –≤—ã —Ñ–∞—Å—Ç—Ñ—É–¥–æ–º?', reply_markup=binary_kb)
    await state.set_state(Form.FAVC)

@dp.message(Form.FAVC)
async def smook_handler(msg: Message, state: FSMContext):
    await state.update_data(FAVC = msg.text)
    await msg.answer('–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –ø–∏—Ç–∞–µ—Ç–µ—Å—å –æ–≤–æ—â–∞–º–∏?')
    await state.set_state(Form.FCVC)

@dp.message(Form.FCVC)
async def smook_handler(msg: Message, state: FSMContext):
    await state.update_data(FCVC = msg.text)
    await msg.answer('–í–≤–∏–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏')
    await state.set_state(Form.NCP)

@dp.message(Form.NCP)
async def smook_handler(msg: Message, state: FSMContext):
    await state.update_data(NCP = msg.text)
    await msg.answer('–î–µ–ª–∞–µ—Ç–µ –ª–∏ –≤—ã –ø–µ—Ä–µ–∫—É—Å—ã –º–µ–∂–¥—É –ø—Ä–∏–µ–º–∞–º–∏ –ø–∏—â–∏. –û—Ç–≤–µ—á–∞–π—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ: "–Ω–µ—Ç : 0", "–∏–Ω–æ–≥–¥–∞ : 1", "—á–∞—Å—Ç–æ : 2", "–ø–æ—Å—Ç–æ—è–Ω–æ : 3"')
    await state.set_state(Form.CAEC)

@dp.message(Form.CAEC)
async def smook_handler(msg: Message, state: FSMContext):
    await state.update_data(CAEC = msg.text)
    await msg.answer('–ö—É—Ä–∏—Ç–µ –ª–∏ –≤—ã?')
    await state.set_state(Form.SMOKE)

@dp.message(Form.SMOKE)
async def smook_handler(msg: Message, state: FSMContext):
    await state.update_data(SMOKE = msg.text)
    await msg.answer('–°–∫–æ–ª—å–∫–æ –ª–∏—Ç—Ä–æ–≤ –≤–æ–¥—ã –≤ —Å—Ä–µ–¥–Ω–µ–º –ø—å–µ—Ç–µ –≤ –¥–µ–Ω—å?')
    await state.set_state(Form.CH2O)

@dp.message(Form.CH2O)
async def smook_handler(msg: Message, state: FSMContext):
    await state.update_data(CH2O = msg.text)
    await msg.answer('–í–µ–¥–µ—Ç–µ –ª–∏ –≤—ã –ø–æ–¥—Å—á–µ—Ç –∫–∞–ª–ª–æ—Ä–∏–π –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç–µ?', reply_markup=binary_kb)
    await state.set_state(Form.SCC)

@dp.message(Form.SCC)
async def smook_handler(msg: Message, state: FSMContext):
    await state.update_data(SCC = msg.text)
    await msg.answer('–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é?')
    await state.set_state(Form.FAF)

@dp.message(Form.FAF)
async def smook_handler(msg: Message, state: FSMContext):
    await state.update_data(FAF = msg.text)
    await msg.answer('–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏?(–æ—Ç 0 –¥–æ 2, –≥–¥–µ 0 –Ω–µ –ø–æ–ª—å–∑—É—é—Å—å, 2 –ø–æ–ª—å–∑—É—é—Å—å –µ–∂–µ—á–∞—Å–Ω–æ)')
    await state.set_state(Form.TUE)

@dp.message(Form.TUE)
async def smook_handler(msg: Message, state: FSMContext):
    await state.update_data(TUE = msg.text)
    await msg.answer('–ß–∞—Å—Ç–æ –ª–∏ –≤—ã –ø—å—é—Ç–µ –∞–ª–∫–æ–≥–æ–ª—å–Ω–∏—ã–µ –Ω–∞–ø–∏—Ç–∫–∏? –û—Ç–≤–µ—á–∞–π—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ: "–Ω–µ—Ç : 0", "–∏–Ω–æ–≥–¥–∞ : 1", "—á–∞—Å—Ç–æ : 2", "–ø–æ—Å—Ç–æ—è–Ω–æ : 3"')
    await state.set_state(Form.CALC)

@dp.message(Form.CALC)
async def smook_handler(msg: Message, state: FSMContext):
    await state.update_data(CALC = msg.text)
    await msg.answer('–ö–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è –≤—ã –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å —á–∞—â–µ –≤—Å–µ–≥–æ? –û—Ç–≤–µ—á–∞–π—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ: "–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç : 0", "–ü–µ—Ä–µ–¥–≤–∏–≥–∞—é—Å—å –ø–µ—à–∫–æ–º : 1", "–ê–≤—Ç–æ–º–æ–±–∏–ª—å : 2", "–ú–æ—Ç–æ—Ü–∏–∫–ª : 3", "–í–µ–ª–æ—Å–∏–ø–µ–¥ : 4"')
    await state.set_state(Form.MTRANS)

@dp.message(Form.MTRANS)
async def smook_handler(msg: Message, state: FSMContext):
    await state.update_data(MTRANS = msg.text)
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()

    predict_data = pd.DataFrame([data])

    model = CatBoostClassifier()
    model.load_model('best_catboost_model.cbm')

    prob = model.predict(predict_data)
    obesity_dict = {0 : '–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –≤—Å–µ', 1: '–∏–∑–±—ã—Ç–æ—á–Ω—ã–π –≤–µ—Å I —Å—Ç–µ–ø–µ–Ω–∏', 2 : '–∏–∑–±—ã—Ç–æ—á–Ω—ã–π –≤–µ—Å II —Å—Ç–µ–ø–µ–Ω–∏',
       3 : '–û–∂–∏—Ä–µ–Ω–∏–µ I —Å—Ç–µ–ø–µ–Ω–∏', 4 : '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –≤–µ—Å', 5: '–û–∂–∏—Ä–µ–Ω–∏–µ II —Å—Ç–µ–ø–µ–Ω–∏',
       6 : '–û–∂–∏—Ä–µ–Ω–∏–µ III —Å—Ç–µ–ø–µ–Ω–∏'}
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –æ—Ç–≤–µ—Ç—ã
    await msg.answer(f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {obesity_dict[prob[0][0]]}")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()



if __name__ == "__main__":
    asyncio.run(main())

